<?php

namespace AppBundle\Repository;

use Doctrine\ORM\QueryBuilder;

use AppBundle\Entity\CatalogStatic;

/**
 * MovieRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CatalogStaticRepository extends \Doctrine\ORM\EntityRepository
{
    public function addWhereClause(&$qb,&$params){

        $params = array_filter($params,function($el){
            if(is_array($el)){
                return $el;
            }
            return strip_tags(trim($el));
        });

        // recherche par id
        if(@$params["id"]){
            $this->whereId($qb,@$params["id"]);
        }

        // recherche par published
        if(isset($params["published"])) {
            $params["published"] = ($params["published"] == "yes" || $params["published"] == 1);
            $this->whereIsPublished($qb,@$params["published"]);
        }

       
        // recherche par catalogue
        if(@$params["catalog"]){
            $this->whereCatalog($qb,@$params["catalog"]);
        }

        // recherche par annÃ©e
        if(@$params["year"]){
            $this->whereYear($qb,$params["year"]);
        }
        

        // ordre d'affichage par id
        if(@$params['order_id']){
            $order = strtoupper(trim($params['order_id'])) == "ASC" ? "ASC" : "DESC";
            $qb->orderBy("cs.id",$order);
        }

        if(!@$params['order_id'] && !@$params["order_name"]){
            $params["order_name"] = "asc";
        }

        // ordre d'affichage par date e production
        if(@$params['order_year']){
            $order = strtoupper(trim($params['order_year'])) == "ASC" ? "ASC" : "DESC";
            $qb->orderBy("cs.year",$order);
        }

        return $this;
    }

	public function search($params = array(),$limit = 20,$offset=0){
		$qb = $this->_em->createQueryBuilder();

		$qb->select("cs")
		->from(CatalogStatic::class,"cs")
		->leftJoin("cs.catalog","catalog");

        $this->addWhereClause($qb,$params);

        // ordre d'affichage par id
        if(@$params['order_id']){
            $order = strtoupper(trim($params['order_id'])) == "ASC" ? "ASC" : "DESC";
            $qb->orderBy("cs.id",$order);
        }

		if(!@$params['order_id'] && !@$params["order_name"]){
    		$params["order_name"] = "asc";
    	}

		// ordre d'affichage par date e production
		if(@$params['order_year']){
			$order = strtoupper(trim($params['order_year'])) == "ASC" ? "ASC" : "DESC";
			$qb->orderBy("cs.year",$order);
		}

	    // limit et offset
        if($limit != -1){
            $qb
            ->setFirstResult( $offset )
            ->setMaxResults( $limit );
        }

   		$query = $qb->getQuery();

        $query->setHint(
            \Doctrine\ORM\Query::HINT_CUSTOM_OUTPUT_WALKER,
            'Gedmo\\Translatable\\Query\\TreeWalker\\TranslationWalker'
        );

	    return $query->getResult();
	}

    public function whereId(QueryBuilder $qb,$value){
        if(is_array($value)){
            $qb->andWhere($qb->expr()->in("cs.id",":id"));
        }
        else{
            $qb->andWhere($qb->expr()->eq("cs.id",":id"));
        }
        $qb->setParameter("id",$value);
    }

    public function whereIsPublished(QueryBuilder $qb,$value){
        $qb->andWhere($qb->expr()->eq("cs.published",":published"))
        ->setParameter("published",$value);
    }

    public function whereYear(QueryBuilder $qb,$value){
        $value = substr($value,0,4)."-01-01";
        $value = new \Datetime($value);

        $qb->andWhere(
            $qb->expr()->orX(
                $qb->expr()->eq("DATE_FORMAT(cs.year,'%Y')",":year"),
                $qb->expr()->between(":year","DATE_FORMAT(cs.year,'%Y')","DATE_FORMAT(cs.year,'%Y')")
            )
        )
        ->setParameter("year",$value->format("Y"));
    }

    public function whereCatalog(QueryBuilder $qb,$value){
        
        if(is_numeric($value)){
            $qb->andWhere("catalog.id = :catalog");
        }
        else if(is_array($value)){
            $qb->andWhere($qb->expr()->in("catalog.id",":catalog"));
        }
        else{
            $qb->andWhere("catalog.slug = :catalog");
        }
       
        $qb->setParameter("catalog",$value);
    }


    public function count(array $params = array() ){
        $qb = $this->createQueryBuilder('cs');
        
        $qb
        ->leftJoin("cs.catalog","catalog")
        ->select('count(cs.id)');

        $this->addWhereClause($qb, $params);

        return $qb->getQuery()
        ->getSingleScalarResult();
    }
}
